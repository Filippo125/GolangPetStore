/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * API version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"github.com/gorilla/mux"
	"log"
	"net/http"
	"os"
	"strconv"
)

type PetApi interface {
	AddPet(body Pet) (int, map[string]string, interface{})
	DeletePet(petId int64, apiKey string) (int, map[string]string, interface{})
	FindPetsByStatus(status []string) (int, map[string]string, interface{})
	FindPetsByTags(tags []string) (int, map[string]string, interface{})
	GetPetById(petId int64) (int, map[string]string, interface{})
	UpdatePet(body Pet) (int, map[string]string, interface{})
	UpdatePetWithForm(petId int64, name string, status string) (int, map[string]string, interface{})
	UploadFile(petId int64, additionalMetadata string, file *os.File) (int, map[string]string, interface{})
}

func AddPetHandler(p PetApi) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var b []byte
		var err error
		var body Pet

		bodyErr := json.NewDecoder(r.Body).Decode(&body)
		if bodyErr != nil {
			http.Error(w, bodyErr.Error(), http.StatusBadRequest)
			return
		}
		statusCode, headers, response := p.AddPet(body)
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		for key, value := range headers {
			w.Header().Set(key, value)
		}
		if b, err = json.Marshal(response); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		if _, err = w.Write(b); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		w.WriteHeader(statusCode)
	}
}
func DeletePetHandler(p PetApi) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var b []byte
		var err error
		var petId int64
		var apiKey string
		apiKey = r.Header.Get("apiKey")

		pathParams := mux.Vars(r)
		if petId, err = strconv.ParseInt(pathParams["petId"], 10, 64); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusBadRequest)
			return
		}
		statusCode, headers, response := p.DeletePet(petId, apiKey)
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		for key, value := range headers {
			w.Header().Set(key, value)
		}
		if b, err = json.Marshal(response); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		if _, err = w.Write(b); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		w.WriteHeader(statusCode)
	}
}
func FindPetsByStatusHandler(p PetApi) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var b []byte
		var err error
		var status []string

		params := r.URL.Query()
		status = params["status"]
		statusCode, headers, response := p.FindPetsByStatus(status)
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		for key, value := range headers {
			w.Header().Set(key, value)
		}
		if b, err = json.Marshal(response); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		if _, err = w.Write(b); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		w.WriteHeader(statusCode)
	}
}
func FindPetsByTagsHandler(p PetApi) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var b []byte
		var err error
		var tags []string

		params := r.URL.Query()
		tags = params["tags"]
		statusCode, headers, response := p.FindPetsByTags(tags)
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		for key, value := range headers {
			w.Header().Set(key, value)
		}
		if b, err = json.Marshal(response); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		if _, err = w.Write(b); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		w.WriteHeader(statusCode)
	}
}
func GetPetByIdHandler(p PetApi) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var b []byte
		var err error
		var petId int64

		pathParams := mux.Vars(r)
		if petId, err = strconv.ParseInt(pathParams["petId"], 10, 64); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusBadRequest)
			return
		}
		statusCode, headers, response := p.GetPetById(petId)
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		for key, value := range headers {
			w.Header().Set(key, value)
		}
		if b, err = json.Marshal(response); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		if _, err = w.Write(b); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		w.WriteHeader(statusCode)
	}
}
func UpdatePetHandler(p PetApi) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var b []byte
		var err error
		var body Pet

		bodyErr := json.NewDecoder(r.Body).Decode(&body)
		if bodyErr != nil {
			http.Error(w, bodyErr.Error(), http.StatusBadRequest)
			return
		}
		statusCode, headers, response := p.UpdatePet(body)
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		for key, value := range headers {
			w.Header().Set(key, value)
		}
		if b, err = json.Marshal(response); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		if _, err = w.Write(b); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		w.WriteHeader(statusCode)
	}
}
func UpdatePetWithFormHandler(p PetApi) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var b []byte
		var err error
		var petId int64
		var name string
		var status string

		r.ParseForm()
		name = r.FormValue("name")
		status = r.FormValue("status")
		pathParams := mux.Vars(r)
		if petId, err = strconv.ParseInt(pathParams["petId"], 10, 64); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusBadRequest)
			return
		}
		statusCode, headers, response := p.UpdatePetWithForm(petId, name, status)
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		for key, value := range headers {
			w.Header().Set(key, value)
		}
		if b, err = json.Marshal(response); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		if _, err = w.Write(b); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		w.WriteHeader(statusCode)
	}
}
func UploadFileHandler(p PetApi) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var b []byte
		var err error
		var petId int64
		var additionalMetadata string
		var file *os.File

		r.ParseForm()
		additionalMetadata = r.FormValue("additionalMetadata")
		pathParams := mux.Vars(r)
		if petId, err = strconv.ParseInt(pathParams["petId"], 10, 64); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusBadRequest)
			return
		}
		statusCode, headers, response := p.UploadFile(petId, additionalMetadata, file)
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		for key, value := range headers {
			w.Header().Set(key, value)
		}
		if b, err = json.Marshal(response); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		if _, err = w.Write(b); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		w.WriteHeader(statusCode)
	}
}
