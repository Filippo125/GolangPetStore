/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * API version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"github.com/gorilla/mux"
	"log"
	"net/http"
	"strconv"
)

type StoreApi interface {
	DeleteOrder(orderId int64) (int, map[string]string, interface{})
	GetInventory() (int, map[string]string, interface{})
	GetOrderById(orderId int64) (int, map[string]string, interface{})
	PlaceOrder(body Order) (int, map[string]string, interface{})
}

func DeleteOrderHandler(p StoreApi) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var b []byte
		var err error
		var orderId int64

		pathParams := mux.Vars(r)
		if orderId, err = strconv.ParseInt(pathParams["orderId"], 10, 64); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusBadRequest)
			return
		}
		statusCode, headers, response := p.DeleteOrder(orderId)
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		for key, value := range headers {
			w.Header().Set(key, value)
		}
		if b, err = json.Marshal(response); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		if _, err = w.Write(b); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		w.WriteHeader(statusCode)
	}
}
func GetInventoryHandler(p StoreApi) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var b []byte
		var err error

		statusCode, headers, response := p.GetInventory()
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		for key, value := range headers {
			w.Header().Set(key, value)
		}
		if b, err = json.Marshal(response); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		if _, err = w.Write(b); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		w.WriteHeader(statusCode)
	}
}
func GetOrderByIdHandler(p StoreApi) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var b []byte
		var err error
		var orderId int64

		pathParams := mux.Vars(r)
		if orderId, err = strconv.ParseInt(pathParams["orderId"], 10, 64); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusBadRequest)
			return
		}
		statusCode, headers, response := p.GetOrderById(orderId)
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		for key, value := range headers {
			w.Header().Set(key, value)
		}
		if b, err = json.Marshal(response); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		if _, err = w.Write(b); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		w.WriteHeader(statusCode)
	}
}
func PlaceOrderHandler(p StoreApi) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var b []byte
		var err error
		var body Order

		bodyErr := json.NewDecoder(r.Body).Decode(&body)
		if bodyErr != nil {
			http.Error(w, bodyErr.Error(), http.StatusBadRequest)
			return
		}
		statusCode, headers, response := p.PlaceOrder(body)
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		for key, value := range headers {
			w.Header().Set(key, value)
		}
		if b, err = json.Marshal(response); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		if _, err = w.Write(b); err != nil {

			log.Printf(err.Error())
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		w.WriteHeader(statusCode)
	}
}
